version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "news:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on: 
      - zookeeper

  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      
  spark-worker:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"

  producer:
    build: ./kafka_to_MongoDb/.
    environment: 
      BROKER: kafka:9092
    command: "spark-submit --master spark://spark-master:7077 news_producer.py"
    depends_on: 
      - spark-master
      - kafka

  consumer:
    build: ./kafka_to_MongoDb/.
    environment: 
      BROKER: kafka:9092
    command: "spark-submit --master spark://spark-worker:8081 news_consumer.py"
    depends_on:
      - spark-master
      - kafka
      - producer
      - mongodb  

  preprocessor:
    build: ./pyspark/.
    hostname: pyspark
    links:
      - mongodb:mongodb

  mongodb:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express
    restart: always # fixes MongoNetworkError when mongodb is not ready when mongo-express starts
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb

volumes:
  mongo-data:
    driver: local
